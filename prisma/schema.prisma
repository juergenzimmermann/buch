/// https://www.prisma.io/docs/orm/reference/prisma-schema-reference
/// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generator
generator client {
  /// Default ab Prisma 6.18 (Vorbereitung fuer Prisma 7)
  /// https://www.prisma.io/docs/orm/prisma-schema/overview/generators#output-splitting-and-importing-types
  /// https://www.prisma.io/blog/why-prisma-orm-generates-code-into-node-modules-and-why-it-ll-change
  /// https://www.prisma.io/blog/rust-free-prisma-orm-is-ready-for-production
  /// https://github.com/prisma/prisma/releases/tag/6.6.0
  /// https://github.com/prisma/prisma/releases/tag/6.16.0
  /// ESM-first
  provider            = "prisma-client"
  output              = "../src/generated/prisma"
  /// https://www.prisma.io/docs/orm/reference/preview-features/client-preview-features#currently-active-preview-features
  /// https://github.com/prisma/prisma/releases/tag/5.7.0
  previewFeatures     = ["nativeDistinct", "relationJoins"]
  engineType          = "client"
  /// https://github.com/prisma/prisma/releases/tag/6.12.0
  // importFileExtension = "ts"
}

/// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["buch"]
}

model Abbildung {
  id           Int    @id @default(autoincrement())
  beschriftung String
  contentType  String @map("content_type")
  buchId       Int    @map("buch_id")
  /// https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults
  buch         Buch   @relation(fields: [buchId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#index
  @@index([buchId])
  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-1
  @@map("abbildung")
  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#schema
  @@schema("buch")
}

model Buch {
  id            Int         @id @default(autoincrement())
  version       Int         @default(0)
  isbn          String      @unique
  rating        Int
  art           Buchart?
  preis         Decimal     @db.Decimal(8, 2)
  rabatt        Decimal     @db.Decimal(4, 3)
  lieferbar     Boolean     @default(false)
  datum         DateTime?   @db.Date
  homepage      String?
  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#json
  schlagwoerter Json?
  erzeugt       DateTime    @default(now()) @db.Timestamp(6)
  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#updatedat
  aktualisiert  DateTime    @default(now()) @db.Timestamp(6) @updatedAt
  abbildungen   Abbildung[]
  buchFile      BuchFile?
  titel         Titel?

  @@map("buch")
  @@schema("buch")
}

model BuchFile {
  id       Int     @id @default(autoincrement())
  /// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#bytes
  data     Bytes
  filename String
  mimetype String?
  buchId   Int     @unique @map("buch_id")
  buch     Buch    @relation(fields: [buchId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([buchId])
  @@map("buch_file")
  @@schema("buch")
}

model Titel {
  id         Int     @id @default(autoincrement())
  titel      String
  untertitel String?
  buchId     Int     @unique @map("buch_id")
  buch       Buch    @relation(fields: [buchId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([titel])
  @@map("titel")
  @@schema("buch")
}

/// https://www.prisma.io/docs/orm/reference/prisma-schema-reference#enum
enum Buchart {
  EPUB
  HARDCOVER
  PAPERBACK

  @@map("buchart")
  @@schema("buch")
}
